{"ast":null,"code":"const path = require('path');\n\nrequire('dotenv').config({\n  path: path.join(__dirname, '../.env')\n});\n\nconst accountSid = process.env.TWILIO_ACCOUNT_SID;\nconst authToken = process.env.TWILIO_AUTH_TOKEN;\n\nconst twilio = require('twilio');\n\nconst clientCheck = twilio(accountSid, authToken).lookups.v1;\n\nconst SibApiV3Sdk = require('sib-api-v3-sdk');\n\nconst defaultClient = SibApiV3Sdk.ApiClient.instance;\n\nconst {\n  getVipRequestText\n} = require('../utils/api.helpers');\n\nconst {\n  Application,\n  User\n} = require('../models/index');\n\nconst {\n  AffPartner\n} = require('../models/affiliates/index');\n\nconst crypto = require('crypto');\n\nconst moment = require('moment');\n\nconst accounting = require('accounting');\n\nconst startOfMonthToYesterday = () => moment().startOf('month').add(12, 'hours').format('DD/MM/YYYY') + ' - ' + moment().subtract(1, 'days').format('DD/MM/YYYY'); // Configure API key authorization: api-key\n\n\nlet apiKey = defaultClient.authentications['api-key'];\napiKey.apiKey = process.env.SNDBLAPIKEY; // Configure API key authorization: partner-key\n\nlet partnerKey = defaultClient.authentications['partner-key'];\npartnerKey.apiKey = process.env.PARTNERSNDBLAPIKEY; // function to verify mobile number is correct\n\nfunction verify(phoneNumber) {\n  return clientCheck.phoneNumbers(phoneNumber).fetch().then(() => {\n    return true;\n  }).catch(() => {\n    return false;\n  });\n} // send welcome email\n\n\nfunction sendWelcomeEmail({\n  firstName,\n  email\n}) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 17;\n  sendSmtpEmail.tags = ['join'];\n  sendSmtpEmail.params = {\n    FNAME: firstName\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send application submitted email regardless of whether belongsTo 'Account' as based on req.body data\n\n\nfunction sendApplicationSubmit({\n  firstName,\n  email,\n  brand,\n  accountId,\n  accountEmailAddress,\n  accountCurrency,\n  typeOfAccount\n}) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 1;\n  sendSmtpEmail.tags = ['application'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    EMAIL: accountEmailAddress,\n    ACCOUNTID: accountId,\n    BRAND: brand,\n    CURRENCY: accountCurrency,\n    STATUS: 'Pending',\n    TYPE: typeOfAccount\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send application submitted SMS regardless of whether belongsTo 'Account' as based on req.body data\n\n\nfunction sendApplicationSubmitSMS({\n  firstName,\n  brand,\n  accountId,\n  mobileNumber\n}) {\n  if (verify(mobileNumber)) {\n    const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n    let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n    sendTransacSms.sender = 'EWB';\n    sendTransacSms.recipient = mobileNumber;\n    sendTransacSms.content = `Hi ${firstName}. We have received your ${brand} application for ${accountId}. You will receive a response soon. Thanks, EWB.`;\n    sendTransacSms.type = 'transactional';\n    sendTransacSms.tag = 'application';\n    apiInstance.sendTransacSms(sendTransacSms).then(() => {\n      return {\n        success: true,\n        msg: 'SMS sent'\n      };\n    }).catch(err => {\n      return err;\n    });\n  } else return;\n} // send application result regardless of belongsTo using different templateId's\n\n\nfunction sendApplicationResult(_id, subJoinText) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  const template = {\n    'approved': 2,\n    'approved and upgraded to VIP': 2,\n    'declined': 3,\n    'approved for cashback': 28,\n    'approved for cashback and upgraded to VIP': 28\n  };\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.tags = ['application'];\n  Application.findById(_id).then(a => {\n    const vipStatus = getVipRequestText(subJoinText);\n    sendSmtpEmail.to = [{\n      email: a.accountEmailAddress,\n      name: a.firstName\n    }];\n\n    if (a.belongsTo) {\n      sendSmtpEmail.templateId = template[subJoinText];\n      sendSmtpEmail.params = {\n        FNAME: a.firstName,\n        EMAIL: a.accountEmailAddress,\n        ACCOUNTID: a.accountId,\n        BRAND: a.brand,\n        CURRENCY: a.accountCurrency,\n        SUBJOINTEXT: subJoinText,\n        VIPUPGRADETEXT: vipStatus\n      };\n      apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n        return {\n          success: true,\n          msg: 'Email sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    } else {\n      Application.findById(a._id).then(application => {\n        Promise.all([application, crypto.randomBytes(20)]).then(([application, buffer]) => {\n          const token = buffer.toString('hex');\n          Application.findByIdAndUpdate(application._id, {\n            applicationToken: token,\n            applicationExpires: Date.now() + 86400000\n          }, {\n            upsert: true,\n            new: true\n          }).then(() => {\n            sendSmtpEmail.templateId = subJoinText === 'declined' ? 3 : 4;\n            sendSmtpEmail.params = {\n              FNAME: a.firstName,\n              EMAIL: a.accountEmailAddress,\n              ACCOUNTID: a.accountId,\n              BRAND: a.brand,\n              CURRENCY: a.accountCurrency,\n              SUBJOINTEXT: subJoinText,\n              VIPUPGRADETEXT: vipStatus,\n              ID: token\n            };\n            apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n              return {\n                success: true,\n                msg: 'Email sent'\n              };\n            }).catch(err => {\n              return err;\n            });\n          }).catch(err => {\n            return err;\n          });\n        }).catch(err => {\n          return err;\n        });\n      }).catch(err => {\n        return err;\n      });\n    }\n  }).catch(err => {\n    return err;\n  });\n} // send application result sms text\n\n\nfunction sendApplicationResultSMS({\n  firstName,\n  brand,\n  accountId,\n  mobileNumber\n}, subJoinText) {\n  if (verify(mobileNumber)) {\n    const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n    let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n    sendTransacSms.sender = 'EWB';\n    sendTransacSms.recipient = mobileNumber;\n    sendTransacSms.content = `Hi ${firstName}. Your ${brand} application for ${accountId} has been ${subJoinText}. Thanks, EWB.`;\n    sendTransacSms.type = 'transactional';\n    sendTransacSms.tag = 'application';\n    apiInstance.sendTransacSms(sendTransacSms).then(() => {\n      return {\n        success: true,\n        msg: 'SMS sent'\n      };\n    }).catch(err => {\n      return err;\n    });\n  } else return;\n} // send confirmation of application linked\n\n\nfunction sendApplicationLinked({\n  firstName,\n  brand,\n  accountId,\n  email\n}) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 6;\n  sendSmtpEmail.tags = ['application'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    ACCOUNTID: accountId,\n    BRAND: brand\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send bonus start\n\n\nfunction sendBonusStart({\n  status,\n  value,\n  accountId,\n  brand\n}, email, firstName) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  const currency = brand === 'ecoPayz' ? '€' : '$';\n  const bonusValue = currency + value;\n  const transRequirement = brand === 'Skrill' ? '$3,500' : brand === 'ecoPayz' ? '€5,000' : '$2,000';\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 7;\n  sendSmtpEmail.tags = ['bonus'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    ACCOUNTID: accountId,\n    BRAND: brand,\n    STATUS: status,\n    VALUE: bonusValue,\n    REQUIREMENT: transRequirement\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send bonus start for neteller 1% bonus\n\n\nfunction sendPercentBonusStart({\n  status,\n  accountId,\n  brand,\n  startDate,\n  endDate\n}, email, firstName) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  const start = moment(startDate).format('DD/MM/YYYY');\n  const end = moment(endDate).format('DD/MM/YYYY');\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 8;\n  sendSmtpEmail.tags = ['bonus'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    ACCOUNTID: accountId,\n    BRAND: brand,\n    STATUS: status,\n    START: start,\n    END: end\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send confirmation bonus paid\n\n\nfunction sendBonusPayment({\n  value,\n  brand,\n  accountId\n}, {\n  firstName,\n  email\n}) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  const currency = brand === 'ecoPayz' ? '€' : '$';\n  const bonusValue = currency + value.toFixed(2);\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 10;\n  sendSmtpEmail.tags = ['bonus'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    ACCOUNTID: accountId,\n    BRAND: brand,\n    VALUE: bonusValue\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send contact form submitted\n\n\nfunction sendMessage({\n  name,\n  email,\n  message\n}, date) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: name\n  }, {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  }];\n  sendSmtpEmail.replyTo = {\n    email: email\n  };\n  sendSmtpEmail.templateId = 11;\n  sendSmtpEmail.tags = ['support'];\n  sendSmtpEmail.params = {\n    FNAME: name,\n    DATE: date,\n    MESSAGE: message,\n    EMAIL: email\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send token for password reset\n\n\nfunction forgotPassSubmit(firstName, url, email) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 12;\n  sendSmtpEmail.tags = ['support'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    URL: url\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send final monthly stats\n\n\nfunction sendFinalMonthlyStats(report) {\n  User.findById(report.belongsToUser, {\n    password: 0\n  }).then(user => {\n    const {\n      firstName,\n      email\n    } = user;\n    const {\n      brand,\n      monthId,\n      periodId\n    } = report;\n    const currency = report.brand === 'ecoPayz' ? '€' : '$';\n    const accountId = report.account.accountId;\n    const transfers = accounting.formatMoney(report.account.transValue, currency, 2);\n    const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n    const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    sendSmtpEmail.sender = {\n      name: 'eWalletBooster',\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.to = [{\n      email: email,\n      name: firstName\n    }];\n    sendSmtpEmail.replyTo = {\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.templateId = 13;\n    sendSmtpEmail.tags = ['stats'];\n    sendSmtpEmail.params = {\n      FNAME: firstName,\n      MONTH: monthId,\n      PERIOD: periodId,\n      ACCOUNTID: accountId,\n      BRAND: brand,\n      TRANSFERS: transfers,\n      CASHBACK: cashback,\n      RATE: rate\n    };\n    apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n      return {\n        success: true,\n        msg: 'Email sent'\n      };\n    }).catch(err => {\n      return err;\n    });\n  }).catch(err => {\n    return err;\n  });\n} // send final monthly stats via sms\n\n\nfunction sendFinalMonthlyStatsSMS(report) {\n  User.findById(report.belongsToUser, {\n    password: 0\n  }).then(user => {\n    const {\n      firstName,\n      mobileNumber\n    } = user;\n    const {\n      monthId,\n      brand\n    } = report;\n    const currency = report.brand === 'ecoPayz' ? '€' : '$';\n    const accountId = report.account.accountId;\n    const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n    const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n\n    if (verify(mobileNumber) && cashback !== '0%') {\n      const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n      let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n      sendTransacSms.sender = 'EWB';\n      sendTransacSms.recipient = mobileNumber;\n      sendTransacSms.content = `Hi ${firstName}. Your cashback for ${monthId} has been confirmed for ${brand} account ${accountId}. You earned ${cashback} cashback and your average rate was ${rate}. Please login to request payment. Thanks, EWB.`;\n      sendTransacSms.type = 'transactional';\n      sendTransacSms.tag = 'stats';\n      apiInstance.sendTransacSms(sendTransacSms).then(() => {\n        return {\n          success: true,\n          msg: 'SMS sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    } else return;\n  }).catch(err => {\n    return err;\n  });\n} // send weekly stats on a friday\n\n\nfunction sendMonthStatsOnFriday(report) {\n  User.findById(report.belongsToUser, {\n    password: 0\n  }).then(user => {\n    const {\n      firstName,\n      email\n    } = user;\n    const {\n      brand,\n      monthId,\n      periodId\n    } = report;\n    const currency = report.brand === 'ecoPayz' ? '€' : '$';\n    const accountId = report.account.accountId;\n    const transfers = accounting.formatMoney(report.account.transValue, currency, 2);\n    const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n    const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    sendSmtpEmail.sender = {\n      name: 'eWalletBooster',\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.to = [{\n      email: email,\n      name: firstName\n    }];\n    sendSmtpEmail.replyTo = {\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.templateId = 14;\n    sendSmtpEmail.tags = ['stats'];\n    sendSmtpEmail.params = {\n      FNAME: firstName,\n      MONTH: monthId,\n      PERIOD: startOfMonthToYesterday(),\n      ACCOUNTID: accountId,\n      BRAND: brand,\n      TRANSFERS: transfers,\n      CASHBACK: cashback,\n      RATE: rate\n    };\n    apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n      return {\n        success: true,\n        msg: 'Email sent'\n      };\n    }).catch(err => {\n      return err;\n    });\n  }).catch(err => {\n    return err;\n  });\n} // send weekly stats on a friday via sms\n\n\nfunction sendMonthStatsOnFridaySMS(report) {\n  User.findById(report.belongsToUser, {\n    password: 0\n  }).then(user => {\n    const {\n      firstName,\n      mobileNumber\n    } = user;\n    const {\n      monthId,\n      brand\n    } = report;\n    const currency = report.brand === 'ecoPayz' ? '€' : '$';\n    const accountId = report.account.accountId;\n    const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n    const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n\n    if (verify(mobileNumber) && cashback !== '0%') {\n      const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n      let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n      sendTransacSms.sender = 'EWB';\n      sendTransacSms.recipient = mobileNumber;\n      sendTransacSms.content = `Hi ${firstName}. You've earned ${cashback} cashback in ${monthId} for ${brand} account ${accountId} and your average rate is ${rate}. Wishing you a happy & profitable weekend ahead! Thanks, EWB.`;\n      sendTransacSms.type = 'transactional';\n      sendTransacSms.tag = 'stats';\n      apiInstance.sendTransacSms(sendTransacSms).then(() => {\n        return {\n          success: true,\n          msg: 'SMS sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    } else return;\n  }).catch(err => {\n    return err;\n  });\n} // send confirmation payment has been processed\n\n\nfunction sendPayoutConfirm(report, user) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  const {\n    brand,\n    monthId\n  } = report;\n  let {\n    accountId,\n    cashback\n  } = report.account;\n  const {\n    firstName,\n    email\n  } = user;\n  const currency = brand === 'ecoPayz' ? '€' : '$';\n  cashback = accounting.formatMoney(cashback, currency, 2);\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 15;\n  sendSmtpEmail.tags = ['payments'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    MONTH: monthId,\n    ACCOUNTID: accountId,\n    CASHBACK: cashback\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // send payment request when user requests    \n\n\nfunction sendPaymentRequest({\n  accountId,\n  cashback,\n  month\n}, firstName, email, brand) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  const currency = brand === 'ecoPayz' ? '€' : '$';\n  cashback = accounting.formatMoney(cashback, currency, 2);\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email,\n    name: firstName\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 16;\n  sendSmtpEmail.tags = ['payments'];\n  sendSmtpEmail.params = {\n    FNAME: firstName,\n    MONTH: month,\n    ACCOUNTID: accountId,\n    CASHBACK: cashback\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(err => {\n    return err;\n  });\n} // contacts\n// create new contact\n\n\nfunction createNewContact({\n  email,\n  firstName,\n  lastName,\n  mobileNumber\n}) {\n  const apiInstance = new SibApiV3Sdk.ContactsApi();\n  let createContact = new SibApiV3Sdk.CreateContact();\n  createContact.email = email;\n  createContact.attributes = {\n    FIRSTNAME: firstName,\n    LASTNAME: lastName,\n    PHONENUMBER: mobileNumber\n  };\n  createContact.listIds = [3];\n  apiInstance.createContact(createContact).then(() => {\n    return {\n      success: true,\n      msg: 'User added'\n    };\n  }).catch(() => {\n    // if contact already exists - update it\n    let updateContact = new SibApiV3Sdk.UpdateContact();\n    updateContact.attributes = {\n      FIRSTNAME: firstName,\n      LASTNAME: lastName,\n      PHONENUMBER: mobileNumber\n    };\n    updateContact.listIds = [3];\n    updateContact.unlinkListIds = [8];\n    apiInstance.updateContact(email, updateContact).then(() => {\n      return {\n        success: true,\n        msg: 'User updated'\n      };\n    }).catch(e => e);\n  });\n} // function getContactInfo (email) {\n//     const apiInstance = new SibApiV3Sdk.ContactsApi();\n//     apiInstance.getContactInfo(email)\n//     .then((res) => {\n//         if (res) {\n//             return true;\n//         }\n//     })\n//     .catch(() => {\n//         return false;\n//     })\n// }\n// function deleteContact (email) {\n//     const apiInstance = new SibApiV3Sdk.ContactsApi();\n//     apiInstance.deleteContact(email)\n//     .then(() => {\n//         return ({ success: true, msg: 'Contact deleted' });   \n//     })\n//     .catch(err => {\n//         return err;\n//     })\n// }\n// adding new partner to partner list\n\n\nfunction addPartnerToList({\n  email\n}) {\n  // adding existing user to different list\n  const apiInstance = new SibApiV3Sdk.ContactsApi();\n  const listId = 5;\n  let contactEmails = new SibApiV3Sdk.AddContactToList();\n  contactEmails.emails = [email];\n  apiInstance.addContactToList(listId, contactEmails).then(() => {\n    return {\n      success: true,\n      msg: 'Partner added'\n    };\n  }).catch(e => e);\n}\n\nfunction addLightSignUpToList(email) {\n  const apiInstance = new SibApiV3Sdk.ContactsApi();\n  let createContact = new SibApiV3Sdk.CreateContact();\n  createContact.email = email;\n  createContact.listIds = [8];\n  apiInstance.createContact(createContact).then(() => {\n    sendLightSignUpEmail(email);\n    return {\n      success: true,\n      msg: 'User added'\n    };\n  }).catch(e => e);\n}\n\nfunction sendLightSignUpEmail(email) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 33;\n  sendSmtpEmail.tags = ['join'];\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(e => e);\n} // subpartner volume triggered \n\n\nfunction sendSubPartnerActivation(email) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 36;\n  sendSmtpEmail.tags = ['join'];\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(e => e);\n} // official partner volume triggered \n\n\nfunction sendOfficialPartnerActivation(email) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email\n  }];\n  sendSmtpEmail.replyTo = {\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.templateId = 37;\n  sendSmtpEmail.tags = ['join'];\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n    return {\n      success: true,\n      msg: 'Email sent'\n    };\n  }).catch(e => e);\n} // create new partner\n// partners / affiliates\n// created new partner\n\n\nfunction sendNewPartner(partner) {\n  User.findById(partner.belongsTo, {\n    password: 0\n  }).populate({\n    path: 'partner'\n  }).then(user => {\n    const {\n      firstName,\n      email\n    } = user;\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    sendSmtpEmail.sender = {\n      name: 'eWalletBooster',\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.to = [{\n      email: email,\n      name: firstName\n    }];\n    sendSmtpEmail.replyTo = {\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.templateId = 18;\n    sendSmtpEmail.tags = ['partner'];\n    sendSmtpEmail.params = {\n      FNAME: firstName\n    };\n    apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n      return {\n        success: true,\n        msg: 'Email sent'\n      };\n    }).catch(err => {\n      return err;\n    });\n  }).catch(err => {\n    return err;\n  });\n} // partner updated payment method\n\n\nfunction sendUpdatedPaymentMethod(partner) {\n  User.findById(partner.belongsTo, {\n    password: 0\n  }).populate({\n    path: 'partner'\n  }).then(user => {\n    const {\n      firstName,\n      email\n    } = user;\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    sendSmtpEmail.sender = {\n      name: 'eWalletBooster',\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.to = [{\n      email: email,\n      name: firstName\n    }];\n    sendSmtpEmail.replyTo = {\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.templateId = 19;\n    sendSmtpEmail.tags = ['partner'];\n    sendSmtpEmail.params = {\n      FNAME: firstName\n    };\n    apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n      return {\n        success: true,\n        msg: 'Email sent'\n      };\n    }).catch(err => {\n      return err;\n    });\n  }).catch(err => {\n    return err;\n  });\n} // submit aff application\n\n\nfunction sendAffApplicationSubmit(accountId, belongsTo, brand) {\n  AffPartner.findById(belongsTo).then(partner => {\n    User.findById(partner.belongsTo, {\n      password: 0\n    }).populate({\n      path: 'partner'\n    }).then(user => {\n      const {\n        firstName,\n        email\n      } = user;\n      const apiInstance = new SibApiV3Sdk.SMTPApi();\n      let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n      sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.to = [{\n        email: email,\n        name: firstName\n      }];\n      sendSmtpEmail.replyTo = {\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.templateId = 20;\n      sendSmtpEmail.tags = ['partner'];\n      sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand\n      };\n      apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n        return {\n          success: true,\n          msg: 'Email sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    }).catch(err => {\n      return err;\n    });\n  });\n} // submit vip upgrade request\n\n\nfunction sendVIPRequestSubmit(accountId, belongsTo, brand) {\n  AffPartner.findById(belongsTo).then(partner => {\n    User.findById(partner.belongsTo, {\n      password: 0\n    }).populate({\n      path: 'partner'\n    }).then(user => {\n      const {\n        firstName,\n        email\n      } = user;\n      const apiInstance = new SibApiV3Sdk.SMTPApi();\n      let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n      sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.to = [{\n        email: email,\n        name: firstName\n      }];\n      sendSmtpEmail.replyTo = {\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.templateId = 21;\n      sendSmtpEmail.tags = ['partner'];\n      sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand\n      };\n      apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n        return {\n          success: true,\n          msg: 'Email sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    }).catch(err => {\n      return err;\n    });\n  });\n} // submit payment request\n\n\nfunction sendAffPaymentRequest(_id, amount, currency) {\n  AffPartner.findById(_id).then(partner => {\n    User.findById(partner.belongsTo, {\n      password: 0\n    }).populate({\n      path: 'partner'\n    }).then(user => {\n      const {\n        firstName,\n        email\n      } = user;\n      amount = amount.toFixed(2);\n      const apiInstance = new SibApiV3Sdk.SMTPApi();\n      let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n      sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.to = [{\n        email: email,\n        name: firstName\n      }];\n      sendSmtpEmail.replyTo = {\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.templateId = 23;\n      sendSmtpEmail.tags = ['partner'];\n      sendSmtpEmail.params = {\n        FNAME: firstName,\n        AMOUNT: amount,\n        CURRENCY: currency\n      };\n      apiInstance.sendTransacEmail(sendSmtpEmail).then(() => ({\n        success: true,\n        msg: 'Email sent'\n      })).catch(e => e);\n    }).catch(e => e);\n  });\n} // notify of account found from /affiliate-daily\n\n\nfunction sendAffAccountAdded(_id, accountId, brand) {\n  AffPartner.findById(_id).then(partner => {\n    User.findById(partner.belongsTo, {\n      password: 0\n    }).populate({\n      path: 'partner'\n    }).then(user => {\n      const {\n        firstName,\n        email\n      } = user;\n      const apiInstance = new SibApiV3Sdk.SMTPApi();\n      let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n      sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.to = [{\n        email: email,\n        name: firstName\n      }];\n      sendSmtpEmail.replyTo = {\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.templateId = 22;\n      sendSmtpEmail.tags = ['partner'];\n      sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand\n      };\n      apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n        return {\n          success: true,\n          msg: 'Email sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    }).catch(err => {\n      return err;\n    });\n  });\n} // send aff application result\n\n\nfunction sendAffApplicationResult({\n  belongsTo,\n  accountId,\n  brand\n}, action, reason) {\n  AffPartner.findById(belongsTo).then(partner => {\n    User.findById(partner.belongsTo, {\n      password: 0\n    }).populate({\n      path: 'partner'\n    }).then(user => {\n      const {\n        firstName,\n        email\n      } = user;\n      const apiInstance = new SibApiV3Sdk.SMTPApi();\n      let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n      sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.to = [{\n        email: email,\n        name: firstName\n      }];\n      const template = action === 'upgraded' ? 24 : action === 'approved' ? 25 : 26;\n      sendSmtpEmail.replyTo = {\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.templateId = template;\n      sendSmtpEmail.tags = ['partner'];\n      sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand,\n        REASON: reason\n      };\n      apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n        return {\n          success: true,\n          msg: 'Email sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    }).catch(err => {\n      return err;\n    });\n  });\n} // send payment confirmed \n\n\nfunction sendPaymentSent(_id, amount) {\n  AffPartner.findById(_id).then(partner => {\n    User.findById(partner.belongsTo, {\n      password: 0\n    }).populate({\n      path: 'partner'\n    }).then(user => {\n      const {\n        firstName,\n        email\n      } = user;\n      const {\n        paymentEmail,\n        paymentBrand\n      } = user.partner;\n      amount = amount.toFixed(2);\n      const apiInstance = new SibApiV3Sdk.SMTPApi();\n      let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n      sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.to = [{\n        email: email,\n        name: firstName\n      }];\n      sendSmtpEmail.replyTo = {\n        email: 'support@ewalletbooster.com'\n      };\n      sendSmtpEmail.templateId = 27;\n      sendSmtpEmail.tags = ['partner'];\n      sendSmtpEmail.params = {\n        FNAME: firstName,\n        AMOUNT: amount,\n        PAYMENTBRAND: paymentBrand,\n        PAYMENTEMAIL: paymentEmail\n      };\n      apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n        return {\n          success: true,\n          msg: 'Email sent'\n        };\n      }).catch(err => {\n        return err;\n      });\n    }).catch(err => {\n      return err;\n    });\n  });\n} // send partner account disabled \n\n\nfunction sendPartnerDisabled(_id) {\n  User.findById(_id, {\n    password: 0\n  }).then(user => {\n    const {\n      firstName,\n      email\n    } = user;\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    sendSmtpEmail.sender = {\n      name: 'eWalletBooster',\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.to = [{\n      email: email,\n      name: firstName\n    }];\n    sendSmtpEmail.replyTo = {\n      email: 'support@ewalletbooster.com'\n    };\n    sendSmtpEmail.templateId = 29;\n    sendSmtpEmail.tags = ['partner'];\n    sendSmtpEmail.params = {\n      FNAME: firstName\n    };\n    apiInstance.sendTransacEmail(sendSmtpEmail).then(() => {\n      return {\n        success: true,\n        msg: 'Email sent'\n      };\n    }).catch(err => {\n      return err;\n    });\n  }).catch(err => {\n    return err;\n  });\n} // send ecoPayz request link\n\n\nfunction sendRequestEcoLink(firstName, email) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email\n  }, {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  }];\n  sendSmtpEmail.replyTo = {\n    email\n  };\n  sendSmtpEmail.templateId = 44;\n  sendSmtpEmail.tags = ['partner'];\n  sendSmtpEmail.params = {\n    FNAME: firstName\n  };\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => ({\n    success: true,\n    msg: 'Email sent'\n  })).catch(e => e);\n}\n\nfunction sendConfirmedEcoLink(email) {\n  const apiInstance = new SibApiV3Sdk.SMTPApi();\n  let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n  sendSmtpEmail.sender = {\n    name: 'eWalletBooster',\n    email: 'support@ewalletbooster.com'\n  };\n  sendSmtpEmail.to = [{\n    email: email\n  }];\n  sendSmtpEmail.replyTo = {\n    email\n  };\n  sendSmtpEmail.templateId = 45;\n  sendSmtpEmail.tags = ['partner'];\n  apiInstance.sendTransacEmail(sendSmtpEmail).then(() => ({\n    success: true,\n    msg: 'Email sent'\n  })).catch(e => e);\n}\n\nmodule.exports = {\n  sendApplicationSubmit,\n  sendApplicationSubmitSMS,\n  sendApplicationResult,\n  sendApplicationResultSMS,\n  sendApplicationLinked,\n  sendBonusStart,\n  sendPercentBonusStart,\n  sendBonusPayment,\n  sendMessage,\n  forgotPassSubmit,\n  sendFinalMonthlyStats,\n  sendFinalMonthlyStatsSMS,\n  sendMonthStatsOnFriday,\n  sendMonthStatsOnFridaySMS,\n  sendPayoutConfirm,\n  sendPaymentRequest,\n  sendWelcomeEmail,\n  createNewContact,\n  sendNewPartner,\n  sendUpdatedPaymentMethod,\n  sendAffApplicationSubmit,\n  sendVIPRequestSubmit,\n  sendAffPaymentRequest,\n  sendAffAccountAdded,\n  sendAffApplicationResult,\n  sendPaymentSent,\n  addPartnerToList,\n  sendPartnerDisabled,\n  addLightSignUpToList,\n  sendOfficialPartnerActivation,\n  sendSubPartnerActivation,\n  sendRequestEcoLink,\n  sendConfirmedEcoLink\n}; // sendPayoutConfirm({\n//     \"_id\": {\n//         \"$oid\": \"5cf4e283a9a7df0004743a02\"\n//     },\n//     \"account\": {\n//         \"accountId\": \"452623321637\",\n//         \"deposits\": 0,\n//         \"transValue\": 9123.69,\n//         \"commission\": 27.37,\n//         \"cashback\": 21.49,\n//         \"cashbackRate\": \"0.24%\"\n//     },\n//     \"timestamp\": {\n//         \"$date\": \"2019-06-03T02:22:08.495Z\"\n//     },\n//     \"monthId\": \"June 2019\",\n//     \"periodId\": \"2019/06/01 - 2019/06/30\",\n//     \"brand\": \"Neteller\",\n//     \"status\": \"Pending\",\n//     \"lastUpdate\": \"July 1st 2019, 5:48:03 pm\",\n//     \"__v\": 0,\n//     \"belongsTo\": {\n//         \"$oid\": \"5be40dd24bc2800004028c99\"\n//     },\n//     \"belongsToUser\": \"5bcdcde930f3d20004cf440e\",\n//     \"paymentEmail\": \"paulmckenna191986@hotmail.co.uk\"\n// },{ isDeleted: false,\n//     _id: '5bcdcde930f3d20004cf440e',\n//     mobileNumber: '+447895008966',\n//     firstName: 'Paul',\n//     lastName: 'McKenna',\n//     email: 'mckennapaul27@gmail.com',\n//     SMS: true,\n//     __v: 0,\n//     resetPasswordExpires: null,\n//     resetPasswordToken: null })\n// sendPaymentRequest(\n//     {\n//         \"_id\": \"5c03ba44f9cbd10004e97f35\",\n//         \"status\": \"Requested\",\n//         \"month\": \"November 2018\",\n//         \"accountId\": \"457325584335\",\n//         \"belongsTo\": \"5be4102a2a2c160004409f18\",\n//         \"cashback\": 139.94,\n//         \"__v\": 0\n//     },\n//     'Paul',\n//     'mckennapaul27@gmail.com',\n//     'Neteller'\n// )\n// sendApplicationResultSMS({firstName: 'Paul', brand: 'Neteller', accountId: '450012345432', mobileNumber: '+447895008966'}, 'approved and upgraded to VIP')\n// sendApplicationResult(\"5d1a0ad2e1e1d47c300b5789\", 'approved and upgraded to VIP')\n// createApplicationLink ('5d135a27e78d6432ca2dd9e5')\n// createNewContact(\n//     { isDeleted: false,\n//     _id: '5bcdcde930f3d20004cf440e',\n//     mobileNumber: '+447895008366',\n//     firstName: 'Paul',\n//     lastName: 'McKenna',\n//     email: 'mckennapaul22227@gmail.com',\n//     SMS: true,\n//     __v: 0,\n//     resetPasswordExpires: null,\n//     resetPasswordToken: null }\n// )","map":{"version":3,"sources":["/Users/user1/Documents/development/greenscapes/greenscapes-domestic/utils/sib.helpers.js"],"names":["path","require","config","join","__dirname","accountSid","process","env","TWILIO_ACCOUNT_SID","authToken","TWILIO_AUTH_TOKEN","twilio","clientCheck","lookups","v1","SibApiV3Sdk","defaultClient","ApiClient","instance","getVipRequestText","Application","User","AffPartner","crypto","moment","accounting","startOfMonthToYesterday","startOf","add","format","subtract","apiKey","authentications","SNDBLAPIKEY","partnerKey","PARTNERSNDBLAPIKEY","verify","phoneNumber","phoneNumbers","fetch","then","catch","sendWelcomeEmail","firstName","email","apiInstance","SMTPApi","sendSmtpEmail","SendSmtpEmail","sender","name","to","replyTo","templateId","tags","params","FNAME","sendTransacEmail","success","msg","err","sendApplicationSubmit","brand","accountId","accountEmailAddress","accountCurrency","typeOfAccount","EMAIL","ACCOUNTID","BRAND","CURRENCY","STATUS","TYPE","sendApplicationSubmitSMS","mobileNumber","TransactionalSMSApi","sendTransacSms","SendTransacSms","recipient","content","type","tag","sendApplicationResult","_id","subJoinText","template","findById","a","vipStatus","belongsTo","SUBJOINTEXT","VIPUPGRADETEXT","application","Promise","all","randomBytes","buffer","token","toString","findByIdAndUpdate","applicationToken","applicationExpires","Date","now","upsert","new","ID","sendApplicationResultSMS","sendApplicationLinked","sendBonusStart","status","value","currency","bonusValue","transRequirement","VALUE","REQUIREMENT","sendPercentBonusStart","startDate","endDate","start","end","START","END","sendBonusPayment","toFixed","sendMessage","message","date","DATE","MESSAGE","forgotPassSubmit","url","URL","sendFinalMonthlyStats","report","belongsToUser","password","user","monthId","periodId","account","transfers","formatMoney","transValue","cashback","rate","cashbackRate","MONTH","PERIOD","TRANSFERS","CASHBACK","RATE","sendFinalMonthlyStatsSMS","sendMonthStatsOnFriday","sendMonthStatsOnFridaySMS","sendPayoutConfirm","sendPaymentRequest","month","createNewContact","lastName","ContactsApi","createContact","CreateContact","attributes","FIRSTNAME","LASTNAME","PHONENUMBER","listIds","updateContact","UpdateContact","unlinkListIds","e","addPartnerToList","listId","contactEmails","AddContactToList","emails","addContactToList","addLightSignUpToList","sendLightSignUpEmail","sendSubPartnerActivation","sendOfficialPartnerActivation","sendNewPartner","partner","populate","sendUpdatedPaymentMethod","sendAffApplicationSubmit","sendVIPRequestSubmit","sendAffPaymentRequest","amount","AMOUNT","sendAffAccountAdded","sendAffApplicationResult","action","reason","REASON","sendPaymentSent","paymentEmail","paymentBrand","PAYMENTBRAND","PAYMENTEMAIL","sendPartnerDisabled","sendRequestEcoLink","sendConfirmedEcoLink","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nrequire('dotenv').config({path: path.join(__dirname, '../.env')});\n\nconst accountSid = process.env.TWILIO_ACCOUNT_SID;\nconst authToken = process.env.TWILIO_AUTH_TOKEN;\nconst twilio = require('twilio');\nconst clientCheck = twilio(accountSid, authToken).lookups.v1;\n\nconst SibApiV3Sdk = require('sib-api-v3-sdk');\nconst defaultClient = SibApiV3Sdk.ApiClient.instance;\n\nconst { getVipRequestText } = require('../utils/api.helpers')\nconst { Application, User } = require('../models/index');\nconst { AffPartner } = require('../models/affiliates/index')\n\nconst crypto = require('crypto');\nconst moment = require('moment');\nconst accounting = require('accounting'); \nconst startOfMonthToYesterday = () => moment().startOf('month').add(12, 'hours').format('DD/MM/YYYY') + ' - ' + moment().subtract(1, 'days').format('DD/MM/YYYY');\n// Configure API key authorization: api-key\nlet apiKey = defaultClient.authentications['api-key'];\napiKey.apiKey = process.env.SNDBLAPIKEY;\n\n// Configure API key authorization: partner-key\nlet partnerKey = defaultClient.authentications['partner-key'];\npartnerKey.apiKey = process.env.PARTNERSNDBLAPIKEY;\n\n\n// function to verify mobile number is correct\nfunction verify(phoneNumber) {\n    return clientCheck.phoneNumbers(phoneNumber).fetch()\n    .then(() => {\n        return true;\n    })\n    .catch(() => {\n        return false;\n    })\n}\n\n// send welcome email\nfunction sendWelcomeEmail ({firstName, email}) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail() \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 17;\n    sendSmtpEmail.tags = ['join'];\n    sendSmtpEmail.params = {\n        FNAME: firstName\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send application submitted email regardless of whether belongsTo 'Account' as based on req.body data\nfunction sendApplicationSubmit ({ firstName, email, brand, accountId, accountEmailAddress, accountCurrency, typeOfAccount }) {\n\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail() \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 1;\n    sendSmtpEmail.tags = ['application'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        EMAIL: accountEmailAddress,\n        ACCOUNTID: accountId,\n        BRAND: brand,\n        CURRENCY: accountCurrency,\n        STATUS: 'Pending',\n        TYPE: typeOfAccount\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send application submitted SMS regardless of whether belongsTo 'Account' as based on req.body data\nfunction sendApplicationSubmitSMS ({ firstName, brand, accountId, mobileNumber }) {\n\n    if (verify(mobileNumber)) {\n\n        const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n        let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n\n        sendTransacSms.sender = 'EWB';\n        sendTransacSms.recipient = mobileNumber;\n        sendTransacSms.content = `Hi ${firstName}. We have received your ${brand} application for ${accountId}. You will receive a response soon. Thanks, EWB.`;\n        sendTransacSms.type = 'transactional';\n        sendTransacSms.tag = 'application';\n\n        apiInstance.sendTransacSms(sendTransacSms)\n        .then(() => {\n            return ({success: true, msg: 'SMS sent'});       \n        })\n        .catch(err => {\n            return err;\n        })\n    } else return;\n}\n// send application result regardless of belongsTo using different templateId's\nfunction sendApplicationResult ( _id, subJoinText ) {\n\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    const template = {\n        'approved': 2,\n        'approved and upgraded to VIP': 2,\n        'declined': 3,\n        'approved for cashback': 28,\n        'approved for cashback and upgraded to VIP': 28\n    }\n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.tags = ['application'];\n\n    Application.findById(_id)\n    .then(a => {\n        const vipStatus = getVipRequestText(subJoinText);\n        sendSmtpEmail.to = [{\n            email: a.accountEmailAddress,\n            name: a.firstName\n        }];\n        if (a.belongsTo) {\n            sendSmtpEmail.templateId = template[subJoinText];\n            sendSmtpEmail.params = {\n                FNAME: a.firstName,\n                EMAIL: a.accountEmailAddress,\n                ACCOUNTID: a.accountId,\n                BRAND: a.brand,\n                CURRENCY: a.accountCurrency,\n                SUBJOINTEXT: subJoinText,\n                VIPUPGRADETEXT: vipStatus\n            }\n            apiInstance.sendTransacEmail(sendSmtpEmail)\n            .then(() => {\n                return ({success: true, msg: 'Email sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        } else {\n            Application.findById(a._id)\n            .then(application => {\n                Promise.all([application, crypto.randomBytes(20)])\n                .then(([application, buffer]) => {\n                    const token = buffer.toString('hex');\n                    Application.findByIdAndUpdate(application._id, \n                        {applicationToken: token, applicationExpires: Date.now() + 86400000},\n                        {upsert: true, new: true}\n                    )\n                    .then(() => {\n                        sendSmtpEmail.templateId = subJoinText === 'declined' ? 3 : 4;\n                        sendSmtpEmail.params = {\n                            FNAME: a.firstName,\n                            EMAIL: a.accountEmailAddress,\n                            ACCOUNTID: a.accountId,\n                            BRAND: a.brand,\n                            CURRENCY: a.accountCurrency,\n                            SUBJOINTEXT: subJoinText,\n                            VIPUPGRADETEXT: vipStatus,\n                            ID: token\n                        }\n                        apiInstance.sendTransacEmail(sendSmtpEmail)\n                        .then(() => {\n                            return ({success: true, msg: 'Email sent'});       \n                        })\n                        .catch(err => {\n                            return err;\n                        })\n                    })\n                    .catch(err => {\n                        return err;\n                    })\n                })\n                .catch(err => {\n                    return err;\n                })\n            })\n            .catch(err => {\n                return err;\n            })\n        }\n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send application result sms text\nfunction sendApplicationResultSMS ({ firstName, brand, accountId, mobileNumber }, subJoinText) {\n\n    if (verify(mobileNumber)) {\n\n        const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n        let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n\n        sendTransacSms.sender = 'EWB';\n        sendTransacSms.recipient = mobileNumber;\n        sendTransacSms.content = `Hi ${firstName}. Your ${brand} application for ${accountId} has been ${subJoinText}. Thanks, EWB.`;\n        sendTransacSms.type = 'transactional';\n        sendTransacSms.tag = 'application';\n\n        apiInstance.sendTransacSms(sendTransacSms)\n        .then(() => {\n            return ({success: true, msg: 'SMS sent'});       \n        })\n        .catch(err => {\n            return err;\n        })\n    } else return;\n}\n// send confirmation of application linked\nfunction sendApplicationLinked ({ firstName, brand, accountId, email }) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail() \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 6;\n    sendSmtpEmail.tags = ['application'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send bonus start\nfunction sendBonusStart({status, value, accountId, brand}, email, firstName) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    const currency = brand === 'ecoPayz' ? '€' : '$';\n    const bonusValue = currency + value; \n    const transRequirement = brand === 'Skrill' ? '$3,500' : brand === 'ecoPayz' ? '€5,000' : '$2,000';\n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 7;\n    sendSmtpEmail.tags = ['bonus'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand,\n        STATUS: status,\n        VALUE: bonusValue,\n        REQUIREMENT: transRequirement\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send bonus start for neteller 1% bonus\nfunction sendPercentBonusStart ({status, accountId, brand, startDate, endDate}, email, firstName) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    const start = moment(startDate).format('DD/MM/YYYY');\n    const end = moment(endDate).format('DD/MM/YYYY');\n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 8;\n    sendSmtpEmail.tags = ['bonus'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand,\n        STATUS: status,\n        START: start,\n        END: end\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send confirmation bonus paid\nfunction sendBonusPayment({value, brand, accountId}, {firstName, email}) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    const currency = brand === 'ecoPayz' ? '€' : '$';\n    const bonusValue = currency + (value.toFixed(2)); \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 10;\n    sendSmtpEmail.tags = ['bonus'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        ACCOUNTID: accountId,\n        BRAND: brand,\n        VALUE: bonusValue\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send contact form submitted\nfunction sendMessage({name, email, message}, date) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{email: email, name: name}, {name: 'eWalletBooster', email: 'support@ewalletbooster.com'}];\n    sendSmtpEmail.replyTo = {email: email};\n    sendSmtpEmail.templateId = 11;\n    sendSmtpEmail.tags = ['support'];\n    sendSmtpEmail.params = {\n        FNAME: name,\n        DATE: date,\n        MESSAGE: message,\n        EMAIL: email\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send token for password reset\nfunction forgotPassSubmit(firstName, url, email) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 12;\n    sendSmtpEmail.tags = ['support'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        URL: url\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send final monthly stats\nfunction sendFinalMonthlyStats (report) {\n    User.findById(report.belongsToUser, {password: 0})\n    .then(user => {\n        const {\n            firstName,\n            email\n        } = user;\n        const {\n            brand,\n            monthId,\n            periodId\n        } = report;\n        const currency = report.brand === 'ecoPayz' ? '€' : '$';\n        const accountId = report.account.accountId;\n        const transfers = accounting.formatMoney(report.account.transValue, currency, 2);     \n        const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n        const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n        \n        const apiInstance = new SibApiV3Sdk.SMTPApi();\n        let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n        sendSmtpEmail.sender = {\n            name: 'eWalletBooster',\n            email: 'support@ewalletbooster.com'\n        }\n        sendSmtpEmail.to = [{\n            email: email, \n            name: firstName\n        }];\n        sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n        sendSmtpEmail.templateId = 13;\n        sendSmtpEmail.tags = ['stats'];\n        sendSmtpEmail.params = {\n            FNAME: firstName,\n            MONTH: monthId,\n            PERIOD: periodId,\n            ACCOUNTID: accountId,\n            BRAND: brand,\n            TRANSFERS: transfers,\n            CASHBACK: cashback,\n            RATE: rate\n        }\n        apiInstance.sendTransacEmail(sendSmtpEmail)\n        .then(() => {\n            return ({success: true, msg: 'Email sent'});       \n        })\n        .catch(err => {\n            return err;\n        })\n    })\n    .catch(err => {\n        return err;\n    });   \n}\n// send final monthly stats via sms\nfunction sendFinalMonthlyStatsSMS (report) {\n    User.findById(report.belongsToUser, {password: 0})\n    .then(user => {\n        const {\n            firstName,\n            mobileNumber\n        } = user;\n        const {\n            monthId,\n            brand\n        } = report;\n\n        const currency = report.brand === 'ecoPayz' ? '€' : '$';\n        const accountId = report.account.accountId;\n        const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n        const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n\n        if (verify(mobileNumber) && cashback !== '0%') {\n\n            const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n            let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n\n            sendTransacSms.sender = 'EWB';\n            sendTransacSms.recipient = mobileNumber;\n            sendTransacSms.content = `Hi ${firstName}. Your cashback for ${monthId} has been confirmed for ${brand} account ${accountId}. You earned ${cashback} cashback and your average rate was ${rate}. Please login to request payment. Thanks, EWB.`;\n            sendTransacSms.type = 'transactional';\n            sendTransacSms.tag = 'stats';\n\n            apiInstance.sendTransacSms(sendTransacSms)\n            .then(() => {\n                return ({success: true, msg: 'SMS sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        } else return;\n    })\n    .catch(err => {\n        return err;\n    });\n}\n// send weekly stats on a friday\nfunction sendMonthStatsOnFriday (report) {\n    User.findById(report.belongsToUser, {password: 0})\n    .then(user => {\n        const {\n            firstName,\n            email\n        } = user;\n        const {\n            brand,\n            monthId,\n            periodId\n        } = report;\n        const currency = report.brand === 'ecoPayz' ? '€' : '$';\n        const accountId = report.account.accountId;\n        const transfers = accounting.formatMoney(report.account.transValue, currency, 2);     \n        const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n        const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n        \n        const apiInstance = new SibApiV3Sdk.SMTPApi();\n        let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n        sendSmtpEmail.sender = {\n            name: 'eWalletBooster',\n            email: 'support@ewalletbooster.com'\n        }\n        sendSmtpEmail.to = [{\n            email: email, \n            name: firstName\n        }];\n        sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n        sendSmtpEmail.templateId = 14;\n        sendSmtpEmail.tags = ['stats'];\n        sendSmtpEmail.params = {\n            FNAME: firstName,\n            MONTH: monthId,\n            PERIOD: startOfMonthToYesterday(),\n            ACCOUNTID: accountId,\n            BRAND: brand,\n            TRANSFERS: transfers,\n            CASHBACK: cashback,\n            RATE: rate\n        }\n        apiInstance.sendTransacEmail(sendSmtpEmail)\n        .then(() => {\n            return ({success: true, msg: 'Email sent'});       \n        })\n        .catch(err => {\n            return err;\n        })\n    })\n    .catch(err => {\n        return err;\n    });   \n}\n// send weekly stats on a friday via sms\nfunction sendMonthStatsOnFridaySMS (report) {\n    User.findById(report.belongsToUser, {password: 0})\n    .then(user => {\n        const {\n            firstName,\n            mobileNumber\n        } = user;\n        const {\n            monthId,\n            brand\n        } = report;\n\n        const currency = report.brand === 'ecoPayz' ? '€' : '$';\n        const accountId = report.account.accountId;\n        const cashback = accounting.formatMoney(report.account.cashback, currency, 2);\n        const rate = report.account.cashbackRate === \"NaN%\" ? '0%' : report.account.cashbackRate;\n\n        if (verify(mobileNumber) && cashback !== '0%') {\n\n            const apiInstance = new SibApiV3Sdk.TransactionalSMSApi();\n            let sendTransacSms = new SibApiV3Sdk.SendTransacSms();\n\n            sendTransacSms.sender = 'EWB';\n            sendTransacSms.recipient = mobileNumber;\n            sendTransacSms.content = `Hi ${firstName}. You've earned ${cashback} cashback in ${monthId} for ${brand} account ${accountId} and your average rate is ${rate}. Wishing you a happy & profitable weekend ahead! Thanks, EWB.`;\n            sendTransacSms.type = 'transactional';\n            sendTransacSms.tag = 'stats';\n\n            apiInstance.sendTransacSms(sendTransacSms)\n            .then(() => {\n                return ({success: true, msg: 'SMS sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        } else return;\n    })\n    .catch(err => {\n        return err;\n    });\n}\n// send confirmation payment has been processed\nfunction sendPayoutConfirm (report, user) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    const {\n        brand,\n        monthId\n    } = report;\n    let {\n        accountId,\n        cashback\n    } = report.account;\n    const {\n        firstName,\n        email\n    } = user;\n\n    const currency = brand === 'ecoPayz' ? '€' : '$';\n    cashback = accounting.formatMoney(cashback, currency, 2);\n\n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 15;\n    sendSmtpEmail.tags = ['payments'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        MONTH: monthId,\n        ACCOUNTID: accountId,\n        CASHBACK: cashback\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// send payment request when user requests    \nfunction sendPaymentRequest({accountId, cashback, month}, firstName, email, brand) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n    const currency = brand === 'ecoPayz' ? '€' : '$';          \n    cashback = accounting.formatMoney(cashback, currency, 2);  \n\n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email, \n        name: firstName\n    }];\n    sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n    sendSmtpEmail.templateId = 16;\n    sendSmtpEmail.tags = ['payments'];\n    sendSmtpEmail.params = {\n        FNAME: firstName,\n        MONTH: month,\n        ACCOUNTID: accountId,\n        CASHBACK: cashback\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({success: true, msg: 'Email sent'});       \n    })\n    .catch(err => {\n        return err;\n    })\n}\n// contacts\n\n// create new contact\nfunction createNewContact ({ email, firstName, lastName, mobileNumber }) {\n    const apiInstance = new SibApiV3Sdk.ContactsApi();\n    let createContact = new SibApiV3Sdk.CreateContact();\n    createContact.email = email;\n    createContact.attributes = {\n        FIRSTNAME: firstName,\n        LASTNAME: lastName,\n        PHONENUMBER: mobileNumber\n    }\n    createContact.listIds = [3];\n    apiInstance.createContact(createContact)\n    .then(() => {\n        return ({ success: true, msg: 'User added' });   \n    })\n    .catch(() => {\n        // if contact already exists - update it\n        let updateContact = new SibApiV3Sdk.UpdateContact();\n        updateContact.attributes = {\n            FIRSTNAME: firstName,\n            LASTNAME: lastName,\n            PHONENUMBER: mobileNumber\n        }\n        updateContact.listIds = [3];\n        updateContact.unlinkListIds = [8];\n        apiInstance.updateContact(email, updateContact)\n        .then(() => {\n            return ({ success: true, msg: 'User updated' });   \n        })\n        .catch(e => e)\n    })\n}\n\n// function getContactInfo (email) {\n//     const apiInstance = new SibApiV3Sdk.ContactsApi();\n//     apiInstance.getContactInfo(email)\n//     .then((res) => {\n//         if (res) {\n//             return true;\n//         }\n//     })\n//     .catch(() => {\n//         return false;\n//     })\n// }\n\n// function deleteContact (email) {\n//     const apiInstance = new SibApiV3Sdk.ContactsApi();\n//     apiInstance.deleteContact(email)\n//     .then(() => {\n//         return ({ success: true, msg: 'Contact deleted' });   \n//     })\n//     .catch(err => {\n//         return err;\n//     })\n// }\n\n// adding new partner to partner list\nfunction addPartnerToList ({ email }) {\n    // adding existing user to different list\n    const apiInstance = new SibApiV3Sdk.ContactsApi();\n    const listId = 5;\n    let contactEmails = new SibApiV3Sdk.AddContactToList();\n    contactEmails.emails = [email]\n    apiInstance.addContactToList(listId, contactEmails)\n    .then(() => {\n        return ({success: true, msg: 'Partner added'});   \n    })\n    .catch(e => e)\n}\n\nfunction addLightSignUpToList (email) {\n    const apiInstance = new SibApiV3Sdk.ContactsApi();\n    let createContact = new SibApiV3Sdk.CreateContact();\n    createContact.email = email;\n    createContact.listIds = [8]\n    apiInstance.createContact(createContact)\n    .then(() => {\n        sendLightSignUpEmail(email)\n        return ({ success: true, msg: 'User added' });   \n    })\n    .catch(e => e)\n}\n\nfunction sendLightSignUpEmail (email) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail() \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email\n    }];\n    sendSmtpEmail.replyTo = { email: 'support@ewalletbooster.com' };\n    sendSmtpEmail.templateId = 33;\n    sendSmtpEmail.tags = ['join'];\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({ success: true, msg: 'Email sent' });       \n    })\n    .catch(e => e)\n}\n\n// subpartner volume triggered \nfunction sendSubPartnerActivation (email) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail() \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email\n    }];\n    sendSmtpEmail.replyTo = { email: 'support@ewalletbooster.com' };\n    sendSmtpEmail.templateId = 36;\n    sendSmtpEmail.tags = ['join'];\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({ success: true, msg: 'Email sent' });       \n    })\n    .catch(e => e)\n}\n\n// official partner volume triggered \nfunction sendOfficialPartnerActivation (email) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail() \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [{\n        email: email\n    }];\n    sendSmtpEmail.replyTo = { email: 'support@ewalletbooster.com' };\n    sendSmtpEmail.templateId = 37;\n    sendSmtpEmail.tags = ['join'];\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => {\n        return ({ success: true, msg: 'Email sent' });       \n    })\n    .catch(e => e)\n}\n\n// create new partner\n\n// partners / affiliates\n\n// created new partner\nfunction sendNewPartner (partner) {\n    User.findById(partner.belongsTo, {password: 0}).populate({ path: 'partner' })\n    .then(user => {\n        const { firstName, email } = user;\n\n        const apiInstance = new SibApiV3Sdk.SMTPApi();\n        let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n        sendSmtpEmail.sender = {\n            name: 'eWalletBooster',\n            email: 'support@ewalletbooster.com'\n        };\n        sendSmtpEmail.to = [{\n            email: email, \n            name: firstName\n        }];\n        sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n        sendSmtpEmail.templateId = 18;\n        sendSmtpEmail.tags = ['partner'];\n        sendSmtpEmail.params = {\n            FNAME: firstName,\n        }\n        apiInstance.sendTransacEmail(sendSmtpEmail)\n        .then(() => {\n            return ({success: true, msg: 'Email sent'});       \n        })\n        .catch(err => {\n            return err;\n        })\n    })\n    .catch(err => {\n        return err;\n    }); \n}\n\n// partner updated payment method\nfunction sendUpdatedPaymentMethod (partner) {\n    User.findById(partner.belongsTo, {password: 0}).populate({ path: 'partner' })\n    .then(user => {\n        const { firstName, email } = user;\n\n        const apiInstance = new SibApiV3Sdk.SMTPApi();\n        let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n        sendSmtpEmail.sender = {\n            name: 'eWalletBooster',\n            email: 'support@ewalletbooster.com'\n        };\n        sendSmtpEmail.to = [{\n            email: email, \n            name: firstName\n        }];\n        sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n        sendSmtpEmail.templateId = 19;\n        sendSmtpEmail.tags = ['partner'];\n        sendSmtpEmail.params = {\n            FNAME: firstName,\n        }\n        apiInstance.sendTransacEmail(sendSmtpEmail)\n        .then(() => {\n            return ({success: true, msg: 'Email sent'});       \n        })\n        .catch(err => {\n            return err;\n        })\n    })\n    .catch(err => {\n        return err;\n    }); \n}\n\n// submit aff application\nfunction sendAffApplicationSubmit (accountId, belongsTo, brand) {\n    AffPartner.findById(belongsTo)\n    .then(partner => {\n        User.findById(partner.belongsTo, {password: 0}).populate({ path: 'partner' })\n        .then(user => {\n            const { firstName, email } = user;\n\n            const apiInstance = new SibApiV3Sdk.SMTPApi();\n            let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n            sendSmtpEmail.sender = {\n                name: 'eWalletBooster',\n                email: 'support@ewalletbooster.com'\n            };\n            sendSmtpEmail.to = [{\n                email: email, \n                name: firstName\n            }];\n            sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n            sendSmtpEmail.templateId = 20;\n            sendSmtpEmail.tags = ['partner'];\n            sendSmtpEmail.params = {\n                FNAME: firstName,\n                ACCOUNTID: accountId,\n                BRAND: brand\n            }\n            apiInstance.sendTransacEmail(sendSmtpEmail)\n            .then(() => {\n                return ({success: true, msg: 'Email sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        })\n        .catch(err => {\n            return err;\n        }); \n    })\n}\n\n// submit vip upgrade request\nfunction sendVIPRequestSubmit (accountId, belongsTo, brand) {\n    AffPartner.findById(belongsTo)\n    .then(partner => {\n        User.findById(partner.belongsTo, {password: 0}).populate({ path: 'partner' })\n        .then(user => {\n            const { firstName, email } = user;\n\n            const apiInstance = new SibApiV3Sdk.SMTPApi();\n            let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n            sendSmtpEmail.sender = {\n                name: 'eWalletBooster',\n                email: 'support@ewalletbooster.com'\n            };\n            sendSmtpEmail.to = [{\n                email: email, \n                name: firstName\n            }];\n            sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n            sendSmtpEmail.templateId = 21;\n            sendSmtpEmail.tags = ['partner'];\n            sendSmtpEmail.params = {\n                FNAME: firstName,\n                ACCOUNTID: accountId,\n                BRAND: brand\n            }\n            apiInstance.sendTransacEmail(sendSmtpEmail)\n            .then(() => {\n                return ({success: true, msg: 'Email sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        })\n        .catch(err => {\n            return err;\n        }); \n    })\n}\n\n// submit payment request\nfunction sendAffPaymentRequest (_id, amount, currency) {\n    AffPartner.findById(_id)\n    .then(partner => {\n        User.findById(partner.belongsTo, { password: 0 }).populate({ path: 'partner' })\n        .then(user => {\n            const { firstName, email } = user;\n            amount = amount.toFixed(2);\n            const apiInstance = new SibApiV3Sdk.SMTPApi();\n            let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n            sendSmtpEmail.sender = {\n                name: 'eWalletBooster',\n                email: 'support@ewalletbooster.com'\n            };\n            sendSmtpEmail.to = [{\n                email: email, \n                name: firstName\n            }];\n            sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n            sendSmtpEmail.templateId = 23;\n            sendSmtpEmail.tags = ['partner'];\n            sendSmtpEmail.params = {\n                FNAME: firstName,\n                AMOUNT: amount,\n                CURRENCY: currency\n            }\n            apiInstance.sendTransacEmail(sendSmtpEmail)\n            .then(() => ({ success: true, msg: 'Email sent' })) \n            .catch(e => e)\n        }).catch(e => e)\n    })\n}\n\n// notify of account found from /affiliate-daily\nfunction sendAffAccountAdded(_id, accountId, brand) {\n    AffPartner.findById(_id)\n    .then(partner => {\n        User.findById(partner.belongsTo, {password: 0}).populate({ path: 'partner' })\n        .then(user => {\n            const { firstName, email } = user;\n            const apiInstance = new SibApiV3Sdk.SMTPApi();\n            let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n            sendSmtpEmail.sender = {\n                name: 'eWalletBooster',\n                email: 'support@ewalletbooster.com'\n            };\n            sendSmtpEmail.to = [{\n                email: email, \n                name: firstName\n            }];\n            sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n            sendSmtpEmail.templateId = 22;\n            sendSmtpEmail.tags = ['partner'];\n            sendSmtpEmail.params = {\n                FNAME: firstName,\n                ACCOUNTID: accountId,\n                BRAND: brand\n            }\n            apiInstance.sendTransacEmail(sendSmtpEmail)\n            .then(() => {\n                return ({success: true, msg: 'Email sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        })\n        .catch(err => {\n            return err;\n        }); \n    })\n}\n\n// send aff application result\nfunction sendAffApplicationResult ({ belongsTo, accountId, brand }, action, reason) {\n    AffPartner.findById(belongsTo)\n    .then(partner => {\n        User.findById(partner.belongsTo, {password: 0}).populate({ path: 'partner' })\n        .then(user => {\n            const { firstName, email } = user;\n            const apiInstance = new SibApiV3Sdk.SMTPApi();\n            let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n            sendSmtpEmail.sender = {\n                name: 'eWalletBooster',\n                email: 'support@ewalletbooster.com'\n            };\n            sendSmtpEmail.to = [{\n                email: email, \n                name: firstName\n            }];\n\n            const template = action === 'upgraded' ? 24 : action === 'approved' ? 25 : 26;\n            \n            sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n            sendSmtpEmail.templateId = template;\n            sendSmtpEmail.tags = ['partner'];\n            sendSmtpEmail.params = {\n                FNAME: firstName,\n                ACCOUNTID: accountId,\n                BRAND: brand,\n                REASON: reason\n            }\n            apiInstance.sendTransacEmail(sendSmtpEmail)\n            .then(() => {\n                return ({success: true, msg: 'Email sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        })\n        .catch(err => {\n            return err;\n        }); \n    })\n}\n\n// send payment confirmed \nfunction sendPaymentSent(_id, amount) {\n    AffPartner.findById(_id)\n    .then(partner => {\n        User.findById(partner.belongsTo, {password: 0}).populate({ path: 'partner' })\n        .then(user => {\n            const { firstName, email } = user;\n            const { paymentEmail, paymentBrand } = user.partner;\n            amount = amount.toFixed(2);\n            const apiInstance = new SibApiV3Sdk.SMTPApi();\n            let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n            sendSmtpEmail.sender = {\n                name: 'eWalletBooster',\n                email: 'support@ewalletbooster.com'\n            };\n            sendSmtpEmail.to = [{\n                email: email, \n                name: firstName\n            }];\n            sendSmtpEmail.replyTo = {email: 'support@ewalletbooster.com'};\n            sendSmtpEmail.templateId = 27;\n            sendSmtpEmail.tags = ['partner'];\n            sendSmtpEmail.params = {\n                FNAME: firstName,\n                AMOUNT: amount,\n                PAYMENTBRAND: paymentBrand,\n                PAYMENTEMAIL: paymentEmail\n            }\n            apiInstance.sendTransacEmail(sendSmtpEmail)\n            .then(() => {\n                return ({success: true, msg: 'Email sent'});       \n            })\n            .catch(err => {\n                return err;\n            })\n        })\n        .catch(err => {\n            return err;\n        }); \n    })\n}\n\n// send partner account disabled \nfunction sendPartnerDisabled (_id) {\n    User.findById(_id, { password: 0 })\n    .then(user => {\n        const { firstName, email } = user;\n        \n        const apiInstance = new SibApiV3Sdk.SMTPApi();\n        let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n        sendSmtpEmail.sender = {\n            name: 'eWalletBooster',\n            email: 'support@ewalletbooster.com'\n        };\n        sendSmtpEmail.to = [{\n            email: email, \n            name: firstName\n        }];\n        sendSmtpEmail.replyTo = { email: 'support@ewalletbooster.com' };\n        sendSmtpEmail.templateId = 29;\n        sendSmtpEmail.tags = ['partner'];\n        sendSmtpEmail.params = {\n            FNAME: firstName\n        }\n        apiInstance.sendTransacEmail(sendSmtpEmail)\n        .then(() => {\n            return ({success: true, msg: 'Email sent'});       \n        })\n        .catch(err => {\n            return err;\n        })\n    })\n    .catch(err => {\n        return err;\n    }); \n}\n\n// send ecoPayz request link\nfunction sendRequestEcoLink ( firstName, email ) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [\n        { email: email }, \n        { name: 'eWalletBooster', email: 'support@ewalletbooster.com' }\n    ];\n    sendSmtpEmail.replyTo = { email };\n    sendSmtpEmail.templateId = 44;\n    sendSmtpEmail.tags = ['partner'];\n    sendSmtpEmail.params = {\n        FNAME: firstName\n    }\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => ({ success: true, msg: 'Email sent' })) \n    .catch(e => e)\n}\n\nfunction sendConfirmedEcoLink (email) {\n    const apiInstance = new SibApiV3Sdk.SMTPApi();\n    let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n    \n    sendSmtpEmail.sender = {\n        name: 'eWalletBooster',\n        email: 'support@ewalletbooster.com'\n    }\n    sendSmtpEmail.to = [\n        { email: email }\n    ];\n    sendSmtpEmail.replyTo = { email };\n    sendSmtpEmail.templateId = 45;\n    sendSmtpEmail.tags = ['partner'];\n    apiInstance.sendTransacEmail(sendSmtpEmail)\n    .then(() => ({ success: true, msg: 'Email sent' })) \n    .catch(e => e)\n}\n\nmodule.exports = {\n    sendApplicationSubmit,\n    sendApplicationSubmitSMS,\n    sendApplicationResult,\n    sendApplicationResultSMS,\n    sendApplicationLinked,\n    sendBonusStart,\n    sendPercentBonusStart,\n    sendBonusPayment,\n    sendMessage,\n    forgotPassSubmit,\n    sendFinalMonthlyStats,\n    sendFinalMonthlyStatsSMS,\n    sendMonthStatsOnFriday,\n    sendMonthStatsOnFridaySMS,\n    sendPayoutConfirm,\n    sendPaymentRequest,\n    sendWelcomeEmail,\n    createNewContact,\n    sendNewPartner,\n    sendUpdatedPaymentMethod,\n    sendAffApplicationSubmit,\n    sendVIPRequestSubmit,\n    sendAffPaymentRequest,\n    sendAffAccountAdded,\n    sendAffApplicationResult,\n    sendPaymentSent,\n    addPartnerToList,\n    sendPartnerDisabled,\n    addLightSignUpToList,\n    sendOfficialPartnerActivation,\n    sendSubPartnerActivation,\n    sendRequestEcoLink,\n    sendConfirmedEcoLink \n}\n\n// sendPayoutConfirm({\n//     \"_id\": {\n//         \"$oid\": \"5cf4e283a9a7df0004743a02\"\n//     },\n//     \"account\": {\n//         \"accountId\": \"452623321637\",\n//         \"deposits\": 0,\n//         \"transValue\": 9123.69,\n//         \"commission\": 27.37,\n//         \"cashback\": 21.49,\n//         \"cashbackRate\": \"0.24%\"\n//     },\n//     \"timestamp\": {\n//         \"$date\": \"2019-06-03T02:22:08.495Z\"\n//     },\n//     \"monthId\": \"June 2019\",\n//     \"periodId\": \"2019/06/01 - 2019/06/30\",\n//     \"brand\": \"Neteller\",\n//     \"status\": \"Pending\",\n//     \"lastUpdate\": \"July 1st 2019, 5:48:03 pm\",\n//     \"__v\": 0,\n//     \"belongsTo\": {\n//         \"$oid\": \"5be40dd24bc2800004028c99\"\n//     },\n//     \"belongsToUser\": \"5bcdcde930f3d20004cf440e\",\n//     \"paymentEmail\": \"paulmckenna191986@hotmail.co.uk\"\n// },{ isDeleted: false,\n//     _id: '5bcdcde930f3d20004cf440e',\n//     mobileNumber: '+447895008966',\n//     firstName: 'Paul',\n//     lastName: 'McKenna',\n//     email: 'mckennapaul27@gmail.com',\n//     SMS: true,\n//     __v: 0,\n//     resetPasswordExpires: null,\n//     resetPasswordToken: null })\n\n// sendPaymentRequest(\n//     {\n//         \"_id\": \"5c03ba44f9cbd10004e97f35\",\n//         \"status\": \"Requested\",\n//         \"month\": \"November 2018\",\n//         \"accountId\": \"457325584335\",\n//         \"belongsTo\": \"5be4102a2a2c160004409f18\",\n//         \"cashback\": 139.94,\n//         \"__v\": 0\n//     },\n//     'Paul',\n//     'mckennapaul27@gmail.com',\n//     'Neteller'\n// )\n// sendApplicationResultSMS({firstName: 'Paul', brand: 'Neteller', accountId: '450012345432', mobileNumber: '+447895008966'}, 'approved and upgraded to VIP')\n// sendApplicationResult(\"5d1a0ad2e1e1d47c300b5789\", 'approved and upgraded to VIP')\n// createApplicationLink ('5d135a27e78d6432ca2dd9e5')\n// createNewContact(\n//     { isDeleted: false,\n//     _id: '5bcdcde930f3d20004cf440e',\n//     mobileNumber: '+447895008366',\n//     firstName: 'Paul',\n//     lastName: 'McKenna',\n//     email: 'mckennapaul22227@gmail.com',\n//     SMS: true,\n//     __v: 0,\n//     resetPasswordExpires: null,\n//     resetPasswordToken: null }\n// )\n\n\n\n"]},"metadata":{},"sourceType":"script"}